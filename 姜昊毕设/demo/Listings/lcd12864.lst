C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LCD12864
OBJECT MODULE PLACED IN .\output\lcd12864.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE source\lcd12864.c OMF2 OPTIMIZE(8,SPEED) DEBUG PRINT(.\Listings\lcd12864
                    -.lst) PREPRINT(.\Listings\lcd12864.i) OBJECT(.\output\lcd12864.obj)

line level    source

   1          /******************************************************************************
   2          文 件 名   : lcd12864.c
   3          
   4          @file lcd12864.c
   5          @brief lcd12864驱动(无字库驱动)
   6          
   7          ******************************************************************************/
   8          
   9          /*----------------------------------------------*
  10           * 包含头文件                                   *
  11           *----------------------------------------------*/
  12          #include "main.h"
  13          
  14          #ifdef LCD12864_DEV_DRIVER
  15          
  16          /*----------------------------------------------*
  17           * 宏定义                                 *
  18           *----------------------------------------------*/
  19          #define DEBUG   ( 0 )
  20          
  21          #if DEBUG
              #define log(X)    print_string(X)
              #else
  24          #define log(X)
  25          #endif
  26          
  27          
  28          sbit LCD12864_EN  = P2^7;
  29          sbit LCD12864_RW  = P2^5;
  30          sbit LCD12864_DI  = P2^6;
  31          sbit LCD12864_CS1 = P3^2;
  32          sbit LCD12864_CS2 = P3^3;
  33          #define LCD12864_PORT   P0
  34          
  35          ///LCD12864指令
  36          #define LCDSTARTROW     0xC0///<设置LCD12864起始行指令
  37          #define LCDPAGE         0xB8///<设置LCD12864页指令
  38          #define LCDLINE         0x40///<设置LCD12864列指令
  39          /*----------------------------------------------*
  40           * 枚举定义                            *
  41           *----------------------------------------------*/
  42          
  43          /*----------------------------------------------*
  44           * 结构体定义                              *
  45           *----------------------------------------------*/
  46          typedef struct{
  47            uint8_t ascii_display_code[16];
  48            uint8_t ch;
  49          }ascii_lcd12864_t;
  50          
  51          typedef struct{
  52            uint8_t chinese_display_code[32];
  53            uint8_t str[2];
  54          }chinese_lcd12864_t;
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 2   

  55          /*----------------------------------------------*
  56           * 外部函数原型说明                                     *
  57           *----------------------------------------------*/
  58          
  59          /*----------------------------------------------*
  60           * 内部函数原型说明                                   *
  61           *----------------------------------------------*/
  62          
  63          /*----------------------------------------------*
  64           * 全局变量                                     *
  65           *----------------------------------------------*/
  66          
  67          /*----------------------------------------------*
  68           * 常量定义                                       *
  69           *----------------------------------------------*/
  70          ///下列 ASCII 都为 宋体12;  此字体下对应的点阵为：宽x高=8x16
  71          static ascii_lcd12864_t code ascii_code_12864[] = {
  72            {{0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20}, 'A'},
  73            {{0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20}, 'a'},
  74            {{0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00}, 'B'},
  75            {{0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00}, 'b'},
  76            {{0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00}, 'C'},
  77            {{0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00}, 'c'},
  78            {{0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00}, 'D'},
  79            {{0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20}, 'd'},
  80            {{0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00}, 'E'},
  81            {{0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00}, 'e'},
  82            {{0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00}, 'F'},
  83            {{0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00}, 'f'},
  84            {{0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00}, 'G'},
  85            {{0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00}, 'g'},
  86            {{0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20}, 'H'},
  87            {{0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20}, 'h'},
  88            {{0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00}, 'I'},
  89            {{0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00}, 'i'},
  90            {{0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00}, 'J'},
  91            {{0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00}, 'j'},
  92            {{0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00}, 'K'},
  93            {{0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00}, 'k'},
  94            {{0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00}, 'L'},
  95            {{0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00}, 'l'},
  96            {{0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00}, 'M'},
  97            {{0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F}, 'm'},
  98            {{0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00}, 'N'},
  99            {{0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20}, 'n'},
 100            {{0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00}, 'O'},
 101            {{0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00}, 'o'},
 102            {{0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00}, 'P'},
 103            {{0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00}, 'p'},
 104            {{0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00}, 'Q'},
 105            {{0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80}, 'q'},
 106            {{0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20}, 'R'},
 107            {{0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00}, 'r'},
 108            {{0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00}, 'S'},
 109            {{0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00}, 's'},
 110            {{0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00}, 'T'},
 111            {{0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00}, 't'},
 112            {{0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00}, 'U'},
 113            {{0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20}, 'u'},
 114            {{0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00}, 'V'},
 115            {{0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00}, 'v'},
 116            {{0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00}, 'W'},
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 3   

 117            {{0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00}, 'w'},
 118            {{0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20}, 'X'},
 119            {{0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00}, 'x'},
 120            {{0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00}, 'Y'},
 121            {{0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00}, 'y'},
 122            {{0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00}, 'Z'},
 123            {{0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00}, 'z'},
 124            {{0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00}, '0'},
 125            {{0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00}, '1'},
 126            {{0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00}, '2'},
 127            {{0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00}, '3'},
 128            {{0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00}, '4'},
 129            {{0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00}, '5'},
 130            {{0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00}, '6'},
 131            {{0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00}, '7'},
 132            {{0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00}, '8'},
 133            {{0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00}, '9'},
 134            {{0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00}, '!'},
 135            {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00}, '.'},
 136            {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01}, '-'},
 137            {{0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00}, ':'},
 138            {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, ' '},
 139            {{0x00,0x00,0x00,0x00,0xC0,0x38,0x04,0x00,0x00,0x60,0x18,0x07,0x00,0x00,0x00,0x00}, '/'}};
 140          
 141          
 142          ///汉字显示点阵, 此字体下对应的点阵为：宽x高=16x16
 143          static chinese_lcd12864_t code chinese_code_12864[] = {
 144            {{0x00,0x00,0xF8,0x49,0x4A,0x4C,0x48,0xF8,0x48,0x4C,0x4A,0x49,0xF8,0x00,0x00,0x00,
 145              0x10,0x10,0x13,0x12,0x12,0x12,0x12,0xFF,0x12,0x12,0x12,0x12,0x13,0x10,0x10,0x00},"单"},
 146            {{0x00,0x00,0x00,0xFE,0x20,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x00,0x00,
 147              0x00,0x80,0x60,0x1F,0x02,0x02,0x02,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x00},"片"},
 148            {{0x10,0x10,0xD0,0xFF,0x90,0x10,0x00,0xFE,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,
 149              0x04,0x03,0x00,0xFF,0x00,0x83,0x60,0x1F,0x00,0x00,0x00,0x3F,0x40,0x40,0x78,0x00},"机"},
 150            {{0x10,0x60,0x02,0x8C,0x00,0x00,0xFE,0x92,0x92,0x92,0x92,0x92,0xFE,0x00,0x00,0x00,
 151              0x04,0x04,0x7E,0x01,0x40,0x7E,0x42,0x42,0x7E,0x42,0x7E,0x42,0x42,0x7E,0x40,0x00},"温"},
 152            {{0x00,0x00,0xFC,0x24,0x24,0x24,0xFC,0x25,0x26,0x24,0xFC,0x24,0x24,0x24,0x04,0x00,
 153              0x40,0x30,0x8F,0x80,0x84,0x4C,0x55,0x25,0x25,0x25,0x55,0x4C,0x80,0x80,0x80,0x00},"度"},
 154          };
 155          /*---------------------------------------------------------------------------*/
 156          /**
 157          *@brief 检测lcd12864是否忙
 158          *
 159          *
 160          *@param none
 161          *
 162          *@return true 忙 false 空闲
 163          * 
 164          *
 165          *@note 
 166          *
 167          */
 168          static bool lcd12864_is_busy(void)
 169          {
 170   1        uint8_t state = 0;
 171   1        bool busy;
 172   1        
 173   1              LCD12864_PORT = 0xFF;
 174   1              LCD12864_RW = 1;
 175   1              LCD12864_DI = 0;
 176   1              LCD12864_EN = 1;
 177   1              LCD12864_EN = 0;
 178   1        LCD12864_EN = 1;///<LCD12864_EN的下降沿，然后LCD12864_EN持续拉高读才有效
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 4   

 179   1        state = LCD12864_PORT;
 180   1        LCD12864_EN = 0;
 181   1      
 182   1        busy = (bool)(state>>7);
 183   1              return busy; 
 184   1      }
 185          /*---------------------------------------------------------------------------*/
 186          /**
 187          *@brief 向lcd12864写入数据
 188          *
 189          *
 190          *@param ucData 要写入的数据值
 191          *
 192          *@return
 193          * 
 194          *
 195          *@note 
 196          *
 197          */
 198          static void lcd12864_write_data(uint8_t ucData)
 199          {
 200   1        uint16_t timeout;
 201   1      
 202   1        timeout = 0;
 203   1              while(lcd12864_is_busy()){
 204   2          timeout++;
 205   2          if(timeout > 0xff){
 206   3            log("lcd12864_write_data err\r\n");
 207   3            break;
 208   3          }
 209   2        }
 210   1              LCD12864_PORT = 0xFF;
 211   1      
 212   1              LCD12864_RW = 0;
 213   1              LCD12864_DI = 1;
 214   1              LCD12864_PORT = ucData;
 215   1              LCD12864_EN = 1;
 216   1              LCD12864_EN = 0;
 217   1      }
 218          /*---------------------------------------------------------------------------*/
 219          /**
 220          *@brief 向lcd12864写入命令
 221          *
 222          *
 223          *@param ucCMD 命令值
 224          *
 225          *@return 
 226          * 
 227          *
 228          *@note 
 229          *
 230          */
 231          static void lcd12864_write_cmd(uint8_t ucCMD)
 232          {
 233   1              uint16_t timeout;
 234   1      
 235   1        timeout = 0;
 236   1              while(lcd12864_is_busy()){
 237   2          timeout++;
 238   2          if(timeout > 0xff){
 239   3            log("lcd12864_write_cmd err\r\n");
 240   3            break;
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 5   

 241   3          }
 242   2        }
 243   1              LCD12864_PORT = 0xFF;
 244   1      
 245   1              LCD12864_RW = 0;
 246   1              LCD12864_DI = 0;
 247   1              LCD12864_PORT = ucCMD;
 248   1              LCD12864_EN = 1;
 249   1              LCD12864_EN = 0;
 250   1      }
 251          /*---------------------------------------------------------------------------*/
 252          /**
 253          *@brief lcd12864初始化
 254          *
 255          *
 256          *@param none
 257          *
 258          *@return 
 259          * 
 260          *
 261          *@note 
 262          *
 263          */
 264          void lcd12864_init( void )
 265          {
 266   1              LCD12864_CS1 = 1;
 267   1              LCD12864_CS2 = 1;
 268   1        
 269   1              lcd12864_write_cmd(0x38);///<8位形式，两行字符
 270   1              lcd12864_write_cmd(0x0F);///<开显示
 271   1              lcd12864_write_cmd(0x01);///<清屏
 272   1              lcd12864_write_cmd(0x06);///<画面不动，光标右移
 273   1              lcd12864_write_cmd(LCDSTARTROW);///<设置起始行
 274   1      }
 275          /*---------------------------------------------------------------------------*/
 276          /**
 277          *@brief lcd12864显示点阵数据
 278          *
 279          *
 280          *@param ucPage  范围: 0 ~ 6
 281          *@param ucLine  范围: 0 ~ 127 - 8 (119)
 282          *@param ucWidth 字符宽度 8 / 16
 283          *@param ucaRow 点阵数据指针
 284          *
 285          *@return 
 286          * 
 287          *
 288          *@note 
 289          *
 290          */
 291          static void lcd12864_show_custom_row(uint8_t ucPage,uint8_t ucLine,uint8_t ucWidth,uint8_t *ucaRow)
 292          {
 293   1              uint8_t ucCount;
 294   1        
 295   1              if(ucLine < 64){
 296   2              LCD12864_CS1=1;
 297   2              LCD12864_CS2=0;
 298   2              lcd12864_write_cmd(LCDPAGE + ucPage);
 299   2              lcd12864_write_cmd(LCDLINE + ucLine);
 300   2              if( (ucLine + ucWidth) < 64 ){
 301   3                        for(ucCount = 0; ucCount < ucWidth; ucCount++){
 302   4                                lcd12864_write_data(*(ucaRow + ucCount));
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 6   

 303   4                        }
 304   3                      }
 305   2              else{
 306   3                      for(ucCount = 0; ucCount < (64 - ucLine); ucCount++){
 307   4                              lcd12864_write_data(*(ucaRow+ucCount));
 308   4            }
 309   3      
 310   3                      LCD12864_CS1 = 0;
 311   3                      LCD12864_CS2 = 1;
 312   3                      lcd12864_write_cmd(LCDPAGE + ucPage);
 313   3                      lcd12864_write_cmd(LCDLINE);
 314   3                      for(ucCount = 64-ucLine; ucCount < ucWidth; ucCount++){
 315   4                              lcd12864_write_data(*(ucaRow+ucCount));
 316   4                      }
 317   3          }
 318   2              }
 319   1              else{
 320   2              LCD12864_CS1 = 0;
 321   2              LCD12864_CS2 = 1;
 322   2              lcd12864_write_cmd(LCDPAGE+ucPage);
 323   2              lcd12864_write_cmd(LCDLINE+ucLine-64);
 324   2              for(ucCount = 0; ucCount < ucWidth; ucCount++){
 325   3                      lcd12864_write_data(*(ucaRow+ucCount));
 326   3              }
 327   2              }
 328   1      }
 329          /*---------------------------------------------------------------------------*/
 330          /**
 331          *@brief 从点阵数据中显示一个汉字
 332          *
 333          *
 334          *@param ucPage 范围: 0 ~ 6
 335          *@param ucLine 范围: 0 ~ 127 - 16 (111)
 336          *@param ucaChinMap 汉字点阵数据
 337          *
 338          *@return 
 339          * 
 340          *
 341          *@note 
 342          *
 343          */
 344          static void lcd12864_show_one_chin(uint8_t ucPage,uint8_t ucLine,uint8_t *ucaChinMap)
 345          {
 346   1        if(ucaChinMap == NULL)
 347   1          return;
 348   1              lcd12864_show_custom_row(ucPage, ucLine,16, ucaChinMap);
 349   1              lcd12864_show_custom_row(ucPage+1, ucLine,16, ucaChinMap + 16);
 350   1      }
 351          /*---------------------------------------------------------------------------*/
 352          /**
 353          *@brief 从点阵数据中显示一个字符
 354          *
 355          *
 356          *@param ucPage 范围: 0 ~ 6
 357          *@param ucLine 范围: 0 ~ 127 - 8 (119)
 358          *@param ucaCharMap 字符点阵数据
 359          *
 360          *@return 
 361          * 
 362          *
 363          *@note 
 364          *
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 7   

 365          */
 366          static void lcd12864_show_one_ch(uint8_t ucPage,uint8_t ucLine,uint8_t *ucaCharMap)
 367          {
 368   1        if(ucaCharMap == NULL){
 369   2          return;
 370   2        }
 371   1              lcd12864_show_custom_row(ucPage, ucLine, 8, ucaCharMap);
 372   1              lcd12864_show_custom_row(ucPage+1, ucLine, 8, ucaCharMap + 8);
 373   1      }
 374          /*---------------------------------------------------------------------------*/
 375          /**
 376          *@brief 显示一个字符
 377          *
 378          *
 379          *@param ucPage 范围: 0 ~ 6
 380          *@param ucLine 范围: 0 ~ 127 - 8 (119)
 381          *@param ch 要显示的字符
 382          *
 383          *@return 
 384          * 
 385          *
 386          *@note 
 387          *
 388          */
 389          void lcd12864_show_one_char(uint8_t ucPage,uint8_t ucLine,uint8_t ch)
 390          {
 391   1        uint8_t i;
 392   1        
 393   1        for(i = 0; i < (sizeof(ascii_code_12864) / sizeof(ascii_lcd12864_t)); i++){
 394   2          if(ascii_code_12864[i].ch == ch){
 395   3            lcd12864_show_one_ch(ucPage, ucLine, ascii_code_12864[i].ascii_display_code);
 396   3            break;
 397   3          }
 398   2        }
 399   1      }
 400          /*---------------------------------------------------------------------------*/
 401          /**
 402          *@brief 从chinese_code_12864表中查找汉字对于的点阵
 403          *
 404          *
 405          *@param ptr 汉字字符串指针
 406          *
 407          *@return 该汉字对于的点阵数组指针
 408          * 
 409          *
 410          *@note 
 411          *
 412          */
 413          const uint8_t * find_chinese_table_code(const uint8_t * ptr)
 414          {
 415   1        uint8_t i, j;
 416   1      
 417   1        if(ptr == NULL){
 418   2          return NULL;
 419   2        }
 420   1      
 421   1        j = 0xff;  
 422   1        for(i = 0; i < (sizeof(chinese_code_12864) / sizeof(chinese_lcd12864_t)); i++){
 423   2          if(memcmp(chinese_code_12864[i].str, ptr, 2) == 0){
 424   3            j = i;
 425   3            break;
 426   3          }
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 8   

 427   2        }
 428   1      
 429   1        if(j == 0xff){
 430   2          return NULL;
 431   2        }
 432   1        
 433   1        return (const uint8_t *)chinese_code_12864[j].chinese_display_code;
 434   1      }
 435          
 436          /*---------------------------------------------------------------------------*/
 437          /**
 438          *@brief 显示一个汉字
 439          *
 440          *
 441          *@param ucPage 范围: 0 ~ 6
 442          *@param ucLine 范围: 0 ~ 112
 443          *@param str 汉字字符串指针
 444          *
 445          *@return 
 446          * 
 447          *
 448          *@note 
 449          *
 450          */
 451          void lcd12864_show_one_chinese(uint8_t ucPage,uint8_t ucLine, const uint8_t * str)
 452          {
 453   1        const uint8_t * ptr = NULL;
 454   1      
 455   1        ptr = find_chinese_table_code(str);
 456   1        lcd12864_show_one_chin(ucPage, ucLine, ptr);
 457   1      }
 458          /*---------------------------------------------------------------------------*/
 459          /**
 460          *@brief 在lcd12864上显示一行汉字
 461          *
 462          *
 463          *@param ucPage 范围: 0 ~ 6
 464          *@param ucLine 范围: 0 ~ 112
 465          *@param str 汉字字符串指针
 466          *
 467          *@return 
 468          * 
 469          *
 470          *@note 
 471          *
 472          */
 473          void lcd12864_show_line_chinese(uint8_t ucPage,uint8_t ucLine, const uint8_t * str)
 474          {
 475   1        const uint8_t * p = str;
 476   1      
 477   1        if(p == NULL){
 478   2          return;
 479   2        }
 480   1        
 481   1        if(ucPage + 2 > 8){
 482   2          return;    
 483   2        }
 484   1      
 485   1        while(*p != '\0'){
 486   2          lcd12864_show_one_chinese(ucPage, ucLine, p);
 487   2          p += 2;
 488   2          ucLine += 16;
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 9   

 489   2          if(ucLine > 128){
 490   3            return;
 491   3          }
 492   2        }
 493   1      }
 494          /*---------------------------------------------------------------------------*/
 495          /**
 496          *@brief 在lcd12864上显示ASCII字符串
 497          *
 498          *
 499          *@param ucPage 范围: 0 ~ 6
 500          *@param uucLine 范围: 0 ~ 119
 501          *@param str 要显示的字符串指针
 502          *
 503          *@return 
 504          * 
 505          *
 506          *@note 
 507          *
 508          */
 509          void lcd12864_show_string(uint8_t ucPage,uint8_t ucLine, uint8_t * str)
 510          {
 511   1        uint8_t * p = str;
 512   1      
 513   1        if(p == NULL){
 514   2          return;
 515   2        }
 516   1        
 517   1        if(ucPage + 2 > 8){
 518   2          return;    
 519   2        }
 520   1        while(*p != '\0'){
 521   2          if(ucLine + 8 > 128){
 522   3            ucLine = 0;
 523   3            ucPage += 2;
 524   3            if(ucPage + 2 > 8){
 525   4              break;
 526   4            }
 527   3          }
 528   2          lcd12864_show_one_char(ucPage, ucLine, *p);
 529   2          ucLine += 8;
 530   2          p++;
 531   2        }
 532   1      }
 533          /*---------------------------------------------------------------------------*/
 534          /**
 535          *@brief 在lcd12864上绘制图片
 536          *
 537          *
 538          *@param ucPage 范围: 0 ~ 6
 539          *@param ucLine 范围: 0 ~ 119
 540          *@param ucWidth 图像宽度
 541          *@param ucHigh 图像高度
 542          *@param ucaGraph 图像点阵数据
 543          *
 544          *@return 
 545          * 
 546          *
 547          *@note 
 548          *
 549          */
 550          void lcd12864_show_graph(uint8_t ucPage,uint8_t ucLine,uint8_t ucWidth,uint8_t ucHigh,uint8_t * ucaGraph)
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 10  

 551          {
 552   1              uint8_t ucCount;
 553   1      
 554   1        if(ucaGraph == NULL){
 555   2          return;
 556   2        }
 557   1              for(ucCount = 0; ucCount < ucHigh; ucCount++){
 558   2                      lcd12864_show_custom_row(ucPage + ucCount, ucLine, ucWidth, ucaGraph + ucCount*ucWidth);
 559   2              }
 560   1      }
 561          /*---------------------------------------------------------------------------*/
 562          /**
 563          *@brief 设置lcd12864在那一页显示
 564          *
 565          *
 566          *@param page 范围: 0 ~ 6
 567          *
 568          *@return 
 569          * 
 570          *
 571          *@note 
 572          *
 573          */
 574          static void lcd12864_set_display_page(uint8_t page)
 575          {         
 576   1        uint16_t timeout;
 577   1        
 578   1        LCD12864_CS1 = 1;
 579   1        LCD12864_CS2 = 0;
 580   1        timeout = 0;
 581   1              while(lcd12864_is_busy()){
 582   2          timeout++;
 583   2          if(timeout > 0xff){
 584   3            log("lcd12864_set_display_page err1\r\n");
 585   3            break;
 586   3          }
 587   2        }
 588   1      
 589   1        LCD12864_PORT = 0xFF;
 590   1        LCD12864_RW = 0;
 591   1        LCD12864_DI = 0;
 592   1        LCD12864_PORT = page + 0xB8;
 593   1        LCD12864_EN = 1;
 594   1        LCD12864_EN = 0;
 595   1      
 596   1        LCD12864_CS1 = 0;
 597   1        LCD12864_CS2 = 1;
 598   1        
 599   1        timeout = 0;
 600   1              while(lcd12864_is_busy()){
 601   2          timeout++;
 602   2          if(timeout > 0xff){
 603   3            log("lcd12864_set_display_page err2\r\n");
 604   3            break;
 605   3          }
 606   2        }
 607   1        
 608   1        LCD12864_PORT = 0xFF;
 609   1        LCD12864_RW = 0;
 610   1        LCD12864_DI = 0;
 611   1        LCD12864_PORT = page + 0xB8;
 612   1        LCD12864_EN = 1;
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 11  

 613   1        LCD12864_EN = 0;
 614   1      }
 615          /*---------------------------------------------------------------------------*/
 616          /**
 617          *@brief 设置lcd12864在那一列显示
 618          *
 619          *
 620          *@param column 范围: 0 ~ 127
 621          *
 622          *@return 
 623          * 
 624          *
 625          *@note 
 626          *
 627          */
 628          static void lcd12864_set_display_column(uint8_t column)
 629          {
 630   1        uint16_t timeout;
 631   1        
 632   1              LCD12864_CS1 = 1;
 633   1              LCD12864_CS2 = 0;
 634   1              timeout = 0;
 635   1              while(lcd12864_is_busy()){
 636   2          timeout++;
 637   2          if(timeout > 0xff){
 638   3            log("lcd12864_set_display_column err1\r\n");
 639   3            break;
 640   3          }
 641   2        }
 642   1              LCD12864_PORT = 0xFF;
 643   1              LCD12864_RW = 0;
 644   1              LCD12864_DI = 0;
 645   1              LCD12864_PORT = column + 0x40;
 646   1              LCD12864_EN = 1;
 647   1              LCD12864_EN = 0;
 648   1      
 649   1              LCD12864_CS1 = 0;
 650   1              LCD12864_CS2 = 1;
 651   1              timeout = 0;
 652   1              while(lcd12864_is_busy()){
 653   2          timeout++;
 654   2          if(timeout > 0xff){
 655   3            log("lcd12864_set_display_column err2\r\n");
 656   3            break;
 657   3          }
 658   2        }
 659   1              LCD12864_PORT = 0xFF;
 660   1              LCD12864_RW = 0;
 661   1              LCD12864_DI = 0;
 662   1              LCD12864_PORT = column + 0x40;
 663   1              LCD12864_EN = 1;
 664   1              LCD12864_EN = 0;
 665   1      }
 666          /*---------------------------------------------------------------------------*/
 667          /**
 668          *@brief 选择左半屏还是右半屏写入命令
 669          *
 670          *
 671          *@param chip_select 0/1
 672          *@param dsp_data 写入的命令值
 673          *
 674          *@return static
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 12  

 675          * 
 676          *
 677          *@note 
 678          *
 679          */
 680          static void lcd12864_write_data_from_select(uint8_t chip_select, uint8_t dsp_data)
 681          {
 682   1        uint16_t timeout;
 683   1        
 684   1              timeout = 0;
 685   1              while(lcd12864_is_busy()){
 686   2          timeout++;
 687   2          if(timeout > 0xff){
 688   3            log("lcd12864_write_data_from_select err\r\n");
 689   3            break;
 690   3          }
 691   2        }
 692   1        
 693   1              LCD12864_PORT = 0xFF;
 694   1              if(chip_select==1){
 695   2                      LCD12864_CS1 = 1;
 696   2                      LCD12864_CS2 = 0;
 697   2        }else{
 698   2          LCD12864_CS1 = 0;
 699   2          LCD12864_CS2 = 1;
 700   2        }
 701   1              LCD12864_RW = 0;
 702   1              LCD12864_DI = 1;
 703   1              
 704   1              LCD12864_PORT = dsp_data;
 705   1              LCD12864_EN = 1;
 706   1              LCD12864_EN = 0;
 707   1      }
 708          /*---------------------------------------------------------------------------*/
 709          /**
 710          *@brief 读取左半屏/右半屏数据
 711          *
 712          *
 713          *@param chip_select 0 / 1
 714          *
 715          *@return 
 716          * 
 717          *
 718          *@note 
 719          *
 720          */
 721          static uint8_t lcd12864_read_data(uint8_t chip_select)
 722          {
 723   1        uint16_t timeout;
 724   1        uint8_t dsp_data;
 725   1        
 726   1        timeout = 0;
 727   1              while(lcd12864_is_busy()){
 728   2          timeout++;
 729   2          if(timeout > 0xff){
 730   3            log("lcd12864_read_data err\r\n");
 731   3            break;
 732   3          }
 733   2        }
 734   1        LCD12864_PORT = 0xFF;
 735   1        if(chip_select == 1){
 736   2          LCD12864_CS2 = 0;
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 13  

 737   2          LCD12864_CS1 = 1;
 738   2        }
 739   1        else{
 740   2          LCD12864_CS2 = 1;
 741   2          LCD12864_CS1 = 0;
 742   2        }
 743   1        LCD12864_RW = 1;
 744   1        LCD12864_DI = 1;
 745   1        LCD12864_EN = 1;
 746   1        LCD12864_EN = 0;
 747   1        LCD12864_EN = 1;/* E的下降沿，然后E持续拉高读才有效 */
 748   1        dsp_data = LCD12864_PORT;
 749   1        LCD12864_EN = 0;
 750   1        
 751   1        return dsp_data;
 752   1      }
 753          /*---------------------------------------------------------------------------*/
 754          /**
 755          *@brief 清屏
 756          *
 757          *
 758          *@param clear_color 1--黑色,其他值--本色
 759          *
 760          *@return 
 761          * 
 762          *
 763          *@note 
 764          *
 765          */
 766          void lcd12864_clear_display(uint8_t clear_color)
 767          {
 768   1              uint8_t page,column, color;
 769   1        
 770   1        if(clear_color == 1){
 771   2          color = 0xFF;///<设置清屏颜色
 772   2        }else{
 773   2          color = 0x00;
 774   2        } 
 775   1        
 776   1              for(page = 0; page < 8; page++){
 777   2                lcd12864_set_display_page(page);
 778   2                lcd12864_set_display_column(0);
 779   2                for(column = 0; column < 64; column++){       
 780   3            lcd12864_write_data_from_select(1, color);
 781   3            lcd12864_write_data_from_select(2, color);
 782   3                      }
 783   2        }
 784   1      }
 785          /*---------------------------------------------------------------------------*/
 786          /**
 787          *@brief 在lcd12864上画点
 788          *
 789          *
 790          *@param X 0 ~ 127
 791          *@param Y 0 ~ 63
 792          *@param Type 参考 lcd12864_graphic_e
 793          *
 794          *@return 
 795          * 
 796          *
 797          *@note 
 798          *
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 14  

 799          */
 800          void lcd12864_draw_point(uint8_t X, uint8_t Y, lcd12864_graphic_e Type) 
 801          {                                                                                                                                  
 802   1         uint8_t DX = (Y >> 3);///<计算出属于哪个字节
 803   1         uint8_t BX = Y - (DX << 3);///<计算出属于字节哪一位
 804   1         uint8_t TempData = 0; 
 805   1         uint8_t chip_select;
 806   1      
 807   1         if (X > 63) { 
 808   2          chip_select = 2;
 809   2          X -= 64; 
 810   2         }else{ 
 811   2          chip_select = 1; 
 812   2         } 
 813   1      
 814   1         lcd12864_set_display_page(DX);///<设行地址
 815   1         lcd12864_set_display_column(X);///<设列地址
 816   1          
 817   1         TempData = lcd12864_read_data(chip_select);///<读出所画点所在字节的内容
 818   1          
 819   1         switch (Type)///<对该字节进行相应操作
 820   1         { 
 821   2          case LCD12864_GRAPHIC_CLEAR:
 822   2            TempData &= ~(1<<BX); 
 823   2          break;
 824   2          
 825   2          case LCD12864_GRAPHIC_NOT:
 826   2            TempData ^= (1 << BX); 
 827   2          break;
 828   2          
 829   2          case LCD12864_GRAPHIC_DRAW: 
 830   2            TempData |= (1 << BX);  
 831   2          break;
 832   2          
 833   2          default:                            
 834   2          break;
 835   2         } 
 836   1          
 837   1         lcd12864_set_display_page(DX);///<设置行地址
 838   1         lcd12864_set_display_column(X);///<设置列地址
 839   1         lcd12864_write_data_from_select(chip_select, TempData);///<把修改后的字节送回LCD，达到画点目的
 840   1      } 
 841          /*---------------------------------------------------------------------------*/
 842          /**
 843          *@brief 在lcd12864上画线
 844          *
 845          *
 846          *@param x1 起点坐标 x
 847          *@param y1 起点坐标 y
 848          *@param x2 终点坐标 x
 849          *@param y2 终点坐标 y
 850          *
 851          *@return 
 852          * 
 853          *
 854          *@note 
 855          *
 856          */
 857          void lcd12864_draw_line(uint8_t x1, uint8_t y1, uint8_t x2,uint8_t y2)
 858          {                           
 859   1        uint8_t x,y; 
 860   1        uint8_t d_x,d_y;      
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 15  

 861   1        char err = 0;
 862   1        uint8_t temp = 0;
 863   1      
 864   1        if(y2 < y1){
 865   2          x = x1;
 866   2          y = y1;
 867   2          x1 = x2;
 868   2          y1 = y2;
 869   2          x2 = x;
 870   2          y2 = y;
 871   2        }
 872   1        d_y = y2-y1;
 873   1        if(d_y == 0){
 874   2          if(x1 > x2){
 875   3            x = x1;
 876   3            x1 = x2;
 877   3            x2 = x;
 878   3          }
 879   2          for(x = x1; x <= x2; x++){
 880   3            lcd12864_draw_point(x,y1,LCD12864_GRAPHIC_DRAW);
 881   3          } 
 882   2        }else{
 883   2          if(x2 >= x1){
 884   3            temp = 1;
 885   3            d_x = x2-x1;
 886   3          }else{
 887   3            d_x = x1-x2;
 888   3          } 
 889   2          x = x1;
 890   2          y = y1;
 891   2          lcd12864_draw_point(x,y,LCD12864_GRAPHIC_DRAW);
 892   2          if(temp && (d_y <= d_x)){
 893   3            while(x != x2){
 894   4              if(err < 0){
 895   5                x = x+1;
 896   5                err = err+(y2-y);
 897   5              }else{
 898   5                x = x+1;
 899   5                y = y+1;
 900   5                err = err+(y2-y)-(x2-x);
 901   5              }
 902   4              lcd12864_draw_point(x,y,LCD12864_GRAPHIC_DRAW);
 903   4            }
 904   3          }else if(temp && (d_y > d_x)){
 905   3            while(y != y2){
 906   4              d_x = x2-x;
 907   4              d_y = y2-y; 
 908   4              if(err < 0){
 909   5                x = x+1;
 910   5                y = y+1;
 911   5                err = err+d_y-d_x;
 912   5              }else{
 913   5                y = y+1;
 914   5                err = err-d_x;
 915   5              }
 916   4              lcd12864_draw_point(x,y,LCD12864_GRAPHIC_DRAW);
 917   4            }
 918   3          }else if(!temp && (d_y<=d_x)){
 919   3            while(x != x2){
 920   4              d_x = x-x2;
 921   4              d_y = y2-y; 
 922   4              if(err < 0){
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 16  

 923   5                x = x-1;
 924   5                err = err+d_y;
 925   5              }else{
 926   5                x = x-1;
 927   5                y = y+1;
 928   5                err = err+d_y-d_x;
 929   5              }
 930   4              lcd12864_draw_point(x,y,LCD12864_GRAPHIC_DRAW);
 931   4            }
 932   3          } else if(!temp &&(d_y>d_x)){
 933   3            while(y != y2){
 934   4              d_x = x-x2;
 935   4              d_y = y2-y; 
 936   4              if(err<0){
 937   5                x = x-1;
 938   5                y = y+1;
 939   5                err = err+d_y-d_x;
 940   5              }else{
 941   5                y = y+1;
 942   5                err = err-d_x;
 943   5              }
 944   4              lcd12864_draw_point(x,y,LCD12864_GRAPHIC_DRAW);
 945   4            }
 946   3          }
 947   2        }   
 948   1      }                                  
 949          /*---------------------------------------------------------------------------*/
 950          /**
 951          *@brief 在横屏中央画水平线
 952          *
 953          *
 954          *@param none
 955          *
 956          *@return 
 957          * 
 958          *
 959          *@note 
 960          *
 961          */
 962          void lcd12864_draw_level(void)
 963          {
 964   1        uint8_t i;
 965   1        
 966   1        for(i = 0; i < 127; i++){
 967   2          lcd12864_draw_point(i,32,LCD12864_GRAPHIC_DRAW);
 968   2        }
 969   1      }
 970          /*---------------------------------------------------------------------------*/
 971          /**
 972          *@brief 在lcd12864上画直虚线
 973          *
 974          *
 975          *@param x1 起点坐标 x
 976          *@param y1 起点坐标 y
 977          *@param x2 终点坐标 x
 978          *@param y2 终点坐标 y
 979          *
 980          *@return 
 981          * 
 982          *
 983          *@note 
 984          *
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 17  

 985          */
 986          void lcd12864_draw_dotted_line(uint8_t x1, uint8_t y1, uint8_t x2,uint8_t y2)
 987          {
 988   1        uint8_t i;
 989   1        
 990   1        if(y1 == y2){ /* 画水平虚线 */
 991   2          if(x1 < x2){
 992   3            for(i = x1; i < x2; i += 2){
 993   4              lcd12864_draw_point(i,y1,LCD12864_GRAPHIC_DRAW);
 994   4            }
 995   3          }else{
 996   3            for(i = x2; i < x1; i += 2){
 997   4              lcd12864_draw_point(i,y1,LCD12864_GRAPHIC_DRAW);
 998   4            }
 999   3          }
1000   2        }else if(x1 == x2){/* 画垂直虚线 */
1001   2          if(y1 < y2){
1002   3            for(i = y1; i < y2; i += 2){
1003   4              lcd12864_draw_point(x1,i,LCD12864_GRAPHIC_DRAW);
1004   4            }
1005   3          }else{
1006   3            for(i = y2; i < y1; i += 2){
1007   4              lcd12864_draw_point(x1,i,LCD12864_GRAPHIC_DRAW);
1008   4            }
1009   3          }
1010   2        }
1011   1      }
1012          
1013          /*---------------------------------------------------------------------------*/
1014          /**
1015          *@brief 在lcd12864上画正弦曲线
1016          *
1017          *
1018          *@param void
1019          *
1020          *@return 
1021          * 
1022          *
1023          *@note 
1024          *
1025          */
1026          void lcd12864_draw_sine_wave(void)
1027          {
1028   1              uint8_t xn = 0;
1029   1              uint8_t yn = 32;
1030   1              uint8_t i;
1031   1              uint8_t xi,yi;
1032   1        for(i = 0; i < 127; i++){
1033   2                      xi = i;
1034   2                      yi = (sin(i*0.1)*32) + 32;
1035   2                      lcd12864_draw_line(xn,yn,xi,yi);      
1036   2                      xn = i;
1037   2                      yn = yi;
1038   2        }  
1039   1      }
1040          /*---------------------------------------------------------------------------*/
1041          /**
1042          *@brief 在lcd12864上画圆
1043          *
1044          *
1045          *@param x0 圆心坐标
1046          *@param y0 圆心坐标
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 18  

1047          *@param r 圆半径
1048          *
1049          *@return 
1050          * 
1051          *
1052          *@note 
1053          *
1054          */
1055          void lcd12864_draw_circle(uint8_t x0,uint8_t y0,uint8_t r)
1056          {
1057   1        uint8_t xn,yn,xi,yi;
1058   1        unsigned int j;
1059   1      
1060   1        xn = cos(0)*r + x0;
1061   1        yn = sin(0)*r + y0;
1062   1      
1063   1        for(j = 0; j < 630; j++){
1064   2          xi = (cos(j*0.01)*r)+x0;
1065   2          yi = (sin(j*0.01)*r)+y0;
1066   2          lcd12864_draw_line(xn,yn,xi,yi);///<在一系列零散的点上，两点两点之间连线，从而得到一条曲线
1067   2          xn = xi;
1068   2          yn = yi;
1069   2        }
1070   1      }
1071          /*---------------------------------------------------------------------------*/
1072          /**
1073          *@brief 在lcd12864上画矩形/正方形
1074          *
1075          *
1076          *@param x0 左上角坐标 x
1077          *@param y0 左上角坐标 y
1078          *@param x1 右下角坐标 x
1079          *@param y1 右下角坐标 y
1080          *
1081          *@return 
1082          * 
1083          *
1084          *@note 
1085          *
1086          */
1087          void lcd12864_draw_retic(uint8_t x0,uint8_t y0,uint8_t x1,uint8_t y1)
1088          {
1089   1              uint8_t i;
1090   1        
1091   1              for(i = 0; i <= x1-x0; i++){  
1092   2          lcd12864_draw_point(x0 + i, y0, LCD12864_GRAPHIC_DRAW);  
1093   2          lcd12864_draw_point(x0 + i, y1, LCD12864_GRAPHIC_DRAW);  
1094   2        }
1095   1        
1096   1              for(i = 0; i <= y1-y0; i++){  
1097   2          lcd12864_draw_point(x0,y0+i,LCD12864_GRAPHIC_DRAW);  
1098   2          lcd12864_draw_point(x1,y0+i,LCD12864_GRAPHIC_DRAW);  
1099   2        }
1100   1      }
1101          /*---------------------------------------------------------------------------*/
1102          /**
1103          *@brief 在lcd12864上画三角形
1104          *
1105          *
1106          *@param x1 三角形顶点坐标
1107          *@param y1 三角形顶点坐标
1108          *@param x2 三角形顶点坐标
C51 COMPILER V9.60.0.0   LCD12864                                                          05/13/2020 13:11:19 PAGE 19  

1109          *@param y2 三角形顶点坐标
1110          *@param x3 三角形顶点坐标
1111          *@param y3 三角形顶点坐标
1112          *
1113          *@return 
1114          * 
1115          *
1116          *@note 
1117          *
1118          */
1119          void lcd12864_draw_trigle(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2,uint8_t x3,uint8_t y3)
1120          {
1121   1              lcd12864_draw_line(x1,y1,x2,y2);
1122   1              lcd12864_draw_line(x2,y2,x3,y3);
1123   1              lcd12864_draw_line(x1,y1,x3,y3);
1124   1      }
1125          /*---------------------------------------------------------------------------*/
1126          #endif//LCD12864_DEV_DRIVER
1127          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2489    ----
   CONSTANT SIZE    =   1326    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      94
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
