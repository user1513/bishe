C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #include "math.h"
   4          #include "BSP_DS18B20.h"
   5          #include "bsp_usart.h"
   6          #include "stdio.h"
   7          #define uchar unsigned char     // 以后unsigned char就可以用uchar代替
   8          #define uint  unsigned int      // 以后unsigned int 就可以用uint 代替
   9          #define CLAC_SPEED(X)           X / 10000.0
  10          float   Audio_speed = 0.0f;                     //voice sound
  11          float   Temp_val = 0.0f;                        //voice sound
  12          sfr ISP_DATA  = 0xe2;                   // 数据寄存器
  13          sfr ISP_ADDRH = 0xe3;                   // 地址寄存器高八位
  14          sfr ISP_ADDRL = 0xe4;                   // 地址寄存器低八位
  15          sfr ISP_CMD   = 0xe5;                   // 命令寄存器
  16          sfr ISP_TRIG  = 0xe6;                   // 命令触发寄存器
  17          sfr ISP_CONTR = 0xe7;                   // 命令寄存器
  18          
  19          sbit LcdRs_P   = P1^1;          // 1602液晶的RS管脚       
  20          sbit LcdRw_P   = P1^2;          // 1602液晶的RW管脚 
  21          sbit LcdEn_P   = P1^3;          // 1602液晶的EN管脚
  22          sbit Trig1_P   = P2^5;          // 超声波模块1的Trig管脚
  23          sbit Echo1_P   = P2^6;          // 超声波模块1的Echo管脚
  24          sbit Trig2_P   = P3^5;          // 超声波模块2的Trig管脚
  25          sbit Echo2_P   = P3^6;          // 超声波模块2的Echo管脚
  26          sbit Trig3_P   = P3^2;          // 超声波模块3的Trig管脚
  27          sbit Echo3_P   = P3^3;          // 超声波模块3的Echo管脚
  28          sbit Trig4_P   = P1^4;          // 超声波模块4的Trig管脚
  29          sbit Echo4_P   = P1^5;          // 超声波模块4的Echo管脚
  30          sbit KeySet_P  = P2^2;          // 设置按键的管脚
  31          sbit KeyDown_P = P2^1;          // 减按键的管脚
  32          sbit KeyUp_P   = P2^0;          // 加按键的管脚
  33          sbit Buzzer_P  = P2^3;          // 蜂鸣器的管脚
  34          sbit Led1_P    = P2^4;          // 传感器1报警灯
  35          sbit Led2_P    = P3^4;          // 传感器2报警灯
  36          sbit Led3_P    = P1^6;          // 传感器3报警灯
  37          sbit Led4_P    = P1^0;          // 传感器4报警灯
  38          
  39          uint gAlarm;                                                    // 报警距离变量
  40          
  41          
  42          //温度与声速
  43          //方法一公式法
  44          //V=331×根号(1+T/273)(m/S)
  45          //T：是摄氏温度；V：在T℃时的音速(声速)
  46          float datapros(int temp)         
  47          {
  48   1              float tp;  
  49   1              if(temp< 0)                             //当温度值为负数
  50   1              {
  51   2                      //因为读取的温度是实际温度的补码，所以减1，再取反求出原码
  52   2                      temp = temp-1;
  53   2                      temp = ~temp;
  54   2                      tp = - temp*0.0625;     
  55   2                      //留两个小数点就*100，+0.5是四舍五入，因为C语言浮点数转换为整型的时候把小数点
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 2   

  56   2                      //后面的数自动去掉，不管是否大于0.5，而+0.5之后大于0.5的就是进1了，小于0.5的就
  57   2                      //算加上0.5，还是在小数点后面。
  58   2       
  59   2              }
  60   1              else
  61   1              {                       
  62   2                      //如果温度是正的那么，那么正数的原码就是补码它本身
  63   2                      tp = temp*0.0625;       
  64   2                      //留两个小数点就*100，+0.5是四舍五入，因为C语言浮点数转换为整型的时候把小数点
  65   2                      //后面的数自动去掉，不管是否大于0.5，而+0.5之后大于0.5的就是进1了，小于0.5的就
  66   2                      //算加上0.5，还是在小数点后面。
  67   2              }
  68   1              return tp;
  69   1      }
  70          
  71          float Sound_Speed_func()
  72          {
  73   1              Temp_val = datapros(Ds18b20ReadTemp());
  74   1              Audio_speed = 331 * sqrt(1 + (Temp_val) / 273.0);
  75   1              return Audio_speed;
  76   1      }
  77          //方法二查表法
  78          //没有找到合适的表格,待续
  79                          
  80          
  81          
  82          
  83          
  84          
  85          /*********************************************************/
  86          // 单片机内部EEPROM不使能
  87          /*********************************************************/
  88          void ISP_Disable()
  89          {
  90   1              ISP_CONTR = 0;
  91   1              ISP_ADDRH = 0;
  92   1              ISP_ADDRL = 0;
  93   1      }
  94          
  95          
  96          /*********************************************************/
  97          // 从单片机内部EEPROM读一个字节，从0x2000地址开始
  98          /*********************************************************/
  99          unsigned char EEPROM_Read(unsigned int add)
 100          {
 101   1              ISP_DATA  = 0x00;
 102   1              ISP_CONTR = 0x83;
 103   1              ISP_CMD   = 0x01;
 104   1              ISP_ADDRH = (unsigned char)(add>>8);
 105   1              ISP_ADDRL = (unsigned char)(add&0xff);
 106   1              // 对STC89C51系列来说，每次要写入0x46，再写入0xB9,ISP/IAP才会生效
 107   1              ISP_TRIG  = 0x46;          
 108   1              ISP_TRIG  = 0xB9;
 109   1              _nop_();
 110   1              ISP_Disable();
 111   1              return (ISP_DATA);
 112   1      }
 113          
 114          
 115          /*********************************************************/
 116          // 往单片机内部EEPROM写一个字节，从0x2000地址开始
 117          /*********************************************************/
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 3   

 118          void EEPROM_Write(unsigned int add,unsigned char ch)
 119          {
 120   1              ISP_CONTR = 0x83;
 121   1              ISP_CMD   = 0x02;
 122   1              ISP_ADDRH = (unsigned char)(add>>8);
 123   1              ISP_ADDRL = (unsigned char)(add&0xff);
 124   1              ISP_DATA  = ch;
 125   1              ISP_TRIG  = 0x46;
 126   1              ISP_TRIG  = 0xB9;
 127   1              _nop_();
 128   1              ISP_Disable();
 129   1      }
 130          
 131          
 132          /*********************************************************/
 133          // 擦除单片机内部EEPROM的一个扇区
 134          // 写8个扇区中随便一个的地址，便擦除该扇区，写入前要先擦除
 135          /*********************************************************/
 136          void Sector_Erase(unsigned int add)       
 137          {
 138   1              ISP_CONTR = 0x83;
 139   1              ISP_CMD   = 0x03;
 140   1              ISP_ADDRH = (unsigned char)(add>>8);
 141   1              ISP_ADDRL = (unsigned char)(add&0xff);
 142   1              ISP_TRIG  = 0x46;
 143   1              ISP_TRIG  = 0xB9;
 144   1              _nop_();
 145   1              ISP_Disable();
 146   1      }
 147          
 148          
 149          
 150          /*********************************************************/
 151          // 毫秒级的延时函数，time是要延时的毫秒数
 152          /*********************************************************/
 153          void DelayMs(uint time)
 154          {
 155   1              uint i,j;
 156   1              for(i=0;i<time;i++)
 157   1                      for(j=0;j<112;j++);
 158   1      }
 159          
 160          
 161          /*********************************************************/
 162          // 1602液晶写命令函数，cmd就是要写入的命令
 163          /*********************************************************/
 164          void LcdWriteCmd(uchar cmd)
 165          { 
 166   1              LcdRs_P = 0;
 167   1              LcdRw_P = 0;
 168   1              LcdEn_P = 0;
 169   1              P0=cmd;
 170   1              DelayMs(2);
 171   1              LcdEn_P = 1;    
 172   1              DelayMs(2);
 173   1              LcdEn_P = 0;    
 174   1      }
 175          
 176          
 177          /*********************************************************/
 178          // 1602液晶写数据函数，dat就是要写入的数据
 179          /*********************************************************/
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 4   

 180          void LcdWriteData(uchar dat)
 181          {
 182   1              LcdRs_P = 1; 
 183   1              LcdRw_P = 0;
 184   1              LcdEn_P = 0;
 185   1              P0=dat;
 186   1              DelayMs(2);
 187   1              LcdEn_P = 1;    
 188   1              DelayMs(2);
 189   1              LcdEn_P = 0;
 190   1      }
 191          
 192          
 193          /*********************************************************/
 194          // 液晶光标定位函数
 195          /*********************************************************/
 196          void LcdGotoXY(uchar line,uchar column)
 197          {
 198   1              // 第一行
 199   1              if(line==0)        
 200   1                      LcdWriteCmd(0x80+column); 
 201   1              // 第二行
 202   1              if(line==1)        
 203   1                      LcdWriteCmd(0x80+0x40+column); 
 204   1      }
 205          
 206          
 207          
 208          /*********************************************************/
 209          // 液晶输出字符串函数
 210          /*********************************************************/
 211          void LcdPrintStr(uchar *str)
 212          {
 213   1              while(*str!='\0')
 214   1                              LcdWriteData(*str++);
 215   1      }
 216          
 217          
 218          /*********************************************************/
 219          // 液晶输出数字
 220          /*********************************************************/
 221          void LcdPrintNum(uint num)
 222          {
 223   1              LcdWriteData(num/100+0x30);                             // 百位
 224   1              LcdWriteData(num%100/10+0x30);          // 十位
 225   1              LcdWriteData(num%10+0x30);                              // 个位
 226   1      }
 227          
 228          
 229          /*********************************************************/
 230          // 1602液晶功能初始化
 231          /*********************************************************/
 232          void LcdInit()
 233          {
 234   1              LcdWriteCmd(0x38);        // 16*2显示，5*7点阵，8位数据口
 235   1              LcdWriteCmd(0x0C);        // 开显示，不显示光标
 236   1              LcdWriteCmd(0x06);        // 地址加1，当写入数据后光标右移
 237   1              LcdWriteCmd(0x01);        // 清屏
 238   1      }
 239          
 240          
 241          
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 5   

 242          /*********************************************************/
 243          // 1602液晶显示内容初始化
 244          /*********************************************************/
 245          void LcdShowInit()
 246          {
 247   1              LcdGotoXY(0,0);                                                         // 定位到第0行第0列
 248   1              LcdPrintStr("      U         ");        // 第0行显示“      U         ”
 249   1              LcdGotoXY(1,0);                                                         // 定位到第1行第0列
 250   1              LcdPrintStr(" L    D    R    ");        // 第1行显示“ L    D    R    ”
 251   1      }
 252          
 253          
 254          /*********************************************************/
 255          // 计算传感器1测量到的距离
 256          /*********************************************************/
 257          float GetDistance1(void)
 258          {
 259   1              float ss;                                       // 用于记录测得的距离
 260   1      
 261   1              TH0=0;
 262   1              TL0=0;
 263   1      
 264   1              Trig1_P=1;                              // 给超声波模块1一个开始脉冲
 265   1              DelayMs(1);
 266   1              Trig1_P=0;
 267   1      
 268   1              while(!Echo1_P);        // 等待超声波模块1的返回脉冲
 269   1              TR0=1;                                          // 启动定时器，开始计时
 270   1              while(Echo1_P);         // 等待超声波模块1的返回脉冲结束
 271   1              TR0=0;                                          // 停止定时器，停止计时
 272   1      
 273   1              ss=((TH0*256+TL0)*CLAC_SPEED(Sound_Speed_func()))/2;            // 距离cm=（时间us * 速度cm/us）/2
 274   1              return ss;
 275   1      }
 276          
 277          
 278          /*********************************************************/
 279          // 计算传感器2测量到的距离
 280          /*********************************************************/
 281          float GetDistance2(void)
 282          {
 283   1              float ss;                                       // 用于记录测得的距离
 284   1      
 285   1              TH0=0;
 286   1              TL0=0;
 287   1      
 288   1              Trig2_P=1;                              // 给超声波模块2一个开始脉冲
 289   1              DelayMs(1);
 290   1              Trig2_P=0;
 291   1      
 292   1              while(!Echo2_P);        // 等待超声波模块2的返回脉冲
 293   1              TR0=1;                                          // 启动定时器，开始计时
 294   1              while(Echo2_P);         // 等待超声波模块2的返回脉冲结束
 295   1              TR0=0;                                          // 停止定时器，停止计时
 296   1      
 297   1              ss=((TH0*256+TL0)*CLAC_SPEED(Sound_Speed_func()))/2;            // 距离cm=（时间us * 速度cm/us）/2
 298   1              return ss;
 299   1      }
 300          
 301          
 302          /*********************************************************/
 303          // 计算传感器3测量到的距离
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 6   

 304          /*********************************************************/
 305          float GetDistance3(void)
 306          {
 307   1              float ss;                                       // 用于记录测得的距离
 308   1      
 309   1              TH0=0;
 310   1              TL0=0;
 311   1      
 312   1              Trig3_P=1;                              // 给超声波模块3一个开始脉冲
 313   1              DelayMs(1);
 314   1              Trig3_P=0;
 315   1      
 316   1              while(!Echo3_P);        // 等待超声波模块3的返回脉冲
 317   1              TR0=1;                                          // 启动定时器，开始计时
 318   1              while(Echo3_P);         // 等待超声波模块3的返回脉冲结束
 319   1              TR0=0;                                          // 停止定时器，停止计时
 320   1      
 321   1              ss=((TH0*256+TL0)*CLAC_SPEED(Sound_Speed_func()))/2;            // 距离cm=（时间us * 速度cm/us）/2
 322   1              return ss;
 323   1      }
 324          
 325          
 326          /*********************************************************/
 327          // 计算传感器4测量到的距离
 328          /*********************************************************/
 329          float GetDistance4(void)
 330          {
 331   1              float ss;                                       // 用于记录测得的距离
 332   1      
 333   1              TH0=0;
 334   1              TL0=0;
 335   1      
 336   1              Trig4_P=1;                              // 给超声波模块4一个开始脉冲
 337   1              DelayMs(1);
 338   1              Trig4_P=0;
 339   1      
 340   1              while(!Echo4_P);        // 等待超声波模块4的返回脉冲
 341   1              TR0=1;                                          // 启动定时器，开始计时
 342   1              while(Echo4_P);         // 等待超声波模块4的返回脉冲结束
 343   1              TR0=0;                                          // 停止定时器，停止计时
 344   1      
 345   1              ss=((TH0*256+TL0)*CLAC_SPEED(Sound_Speed_func()))/2;            // 距离ms=（时间us * 速度cm/us）/2
 346   1              return ss;
 347   1      }
 348          
 349          
 350          /*********************************************************/
 351          // 按键扫描
 352          /*********************************************************/
 353          void KeyScanf()
 354          {
 355   1              if(KeySet_P==0)                                 // 判断是否有按键按下
 356   1              {
 357   2                      LcdGotoXY(0,0);                                                         // 光标定位
 358   2                      LcdPrintStr("   Alarm Set    ");        // 第0行显示“   Alarm Set    ”
 359   2                      LcdGotoXY(1,0);                                                                         // 光标定位
 360   2                      LcdPrintStr("  alarm=   cm   ");        // 第1行显示“  alarm=   cm   ”
 361   2                      LcdGotoXY(1,8);                                                                         // 光标定位
 362   2                      LcdPrintNum(gAlarm);                                                    // 显示当前的报警值
 363   2      
 364   2                      DelayMs(10);                                                                                    // 消除按键按下的抖动
 365   2                      while(!KeySet_P);                                                                       // 等待按键释放
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 7   

 366   2                      DelayMs(10);                                                                                    // 消除按键松开的抖动           
 367   2      
 368   2                      while(1)
 369   2                      {               
 370   3                              /* 报警值减的处理 */
 371   3                              if(KeyDown_P==0)                                        
 372   3                              {
 373   4                                      if(gAlarm>2)                                            // 报警值大于2才能减1
 374   4                                              gAlarm--;                                                       // 报警值减1
 375   4                                      LcdGotoXY(1,8);                                 // 光标定位
 376   4                                      LcdPrintNum(gAlarm);            // 刷新修改后的报警值
 377   4                                      DelayMs(300);                                           // 延时
 378   4                              }
 379   3      
 380   3                              /* 报警值加的处理 */
 381   3                              if(KeyUp_P==0)                                  
 382   3                              {
 383   4                                      if(gAlarm<400)                                  // 报警值小于400才能加1
 384   4                                              gAlarm++;                                                       // 报警值加1
 385   4                                      LcdGotoXY(1,8);                                 // 光标定位
 386   4                                      LcdPrintNum(gAlarm);            // 刷新修改后的报警值
 387   4                                      DelayMs(300);                                           // 延时
 388   4                              }
 389   3                              
 390   3                              /* 退出报警值设置 */
 391   3                              if(KeySet_P==0)                                 
 392   3                              {
 393   4                                      break;                                                                  // 退出while循环
 394   4                              }       
 395   3                      }
 396   2                      
 397   2                      LcdShowInit();                                                  // 液晶恢复测量到测量界面
 398   2                      DelayMs(10);                                                    // 消除按键按下的抖动
 399   2                      while(!KeySet_P);                                               // 等待按键释放
 400   2                      DelayMs(10);                                                    // 消除按键松开的抖动           
 401   2      
 402   2                      Sector_Erase(0x2000);                           // 保存报警距离
 403   2                      EEPROM_Write(0x2000,gAlarm/100);
 404   2                      EEPROM_Write(0x2001,gAlarm%100);                
 405   2              }       
 406   1      }
 407          
 408          
 409          /*********************************************************/
 410          // 传感器1报警判断
 411          /*********************************************************/
 412          void AlarmJudge1(float ss)
 413          {
 414   1              if(ss<gAlarm)           // LED灯判断
 415   1              {
 416   2                      Led1_P=0;
 417   2              }
 418   1              else
 419   1              {
 420   2                      Led1_P=1;
 421   2              }
 422   1              
 423   1              if((Led1_P==0)||(Led2_P==0)||(Led3_P==0)||(Led4_P==0))  // 蜂鸣器判断
 424   1              {
 425   2                      Buzzer_P=0;
 426   2              }
 427   1              else
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 8   

 428   1              {
 429   2                      Buzzer_P=1;
 430   2              }
 431   1      }
 432          
 433          
 434          /*********************************************************/
 435          // 传感器2报警判断
 436          /*********************************************************/
 437          void AlarmJudge2(float ss)
 438          {
 439   1              if(ss<gAlarm)           // LED灯判断
 440   1              {
 441   2                      Led2_P=0;
 442   2              }
 443   1              else
 444   1              {
 445   2                      Led2_P=1;
 446   2              }
 447   1              
 448   1              if((Led1_P==0)||(Led2_P==0)||(Led3_P==0)||(Led4_P==0))  // 蜂鸣器判断
 449   1              {
 450   2                      Buzzer_P=0;
 451   2              }
 452   1              else
 453   1              {
 454   2                      Buzzer_P=1;
 455   2              }
 456   1      }
 457          
 458          
 459          /*********************************************************/
 460          // 传感器3报警判断
 461          /*********************************************************/
 462          void AlarmJudge3(float ss)
 463          {
 464   1              if(ss<gAlarm)           // LED灯判断
 465   1              {
 466   2                      Led3_P=0;
 467   2              }
 468   1              else
 469   1              {
 470   2                      Led3_P=1;
 471   2              }
 472   1              
 473   1              if((Led1_P==0)||(Led2_P==0)||(Led3_P==0)||(Led4_P==0))  // 蜂鸣器判断
 474   1              {
 475   2                      Buzzer_P=0;
 476   2              }
 477   1              else
 478   1              {
 479   2                      Buzzer_P=1;
 480   2              }
 481   1      }
 482          
 483          
 484          /*********************************************************/
 485          // 传感器4报警判断
 486          /*********************************************************/
 487          void AlarmJudge4(float ss)
 488          {
 489   1              if(ss<gAlarm)           // LED灯判断
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 9   

 490   1              {
 491   2                      Led4_P=0;
 492   2              }
 493   1              else
 494   1              {
 495   2                      Led4_P=1;
 496   2              }
 497   1              
 498   1              if((Led1_P==0)||(Led2_P==0)||(Led3_P==0)||(Led4_P==0))  // 蜂鸣器判断
 499   1              {
 500   2                      Buzzer_P=0;
 501   2              }
 502   1              else
 503   1              {
 504   2                      Buzzer_P=1;
 505   2              }
 506   1      }
 507          
 508          
 509          /*********************************************************/
 510          // 报警值初始化
 511          /*********************************************************/
 512          void AlarmInit()
 513          {
 514   1              gAlarm=EEPROM_Read(0x2000)*100+EEPROM_Read(0x2001) * 10;                // 从EEPROM读取报警值
 515   1      
 516   1              if((gAlarm==0)||(gAlarm>400))                   // 如果读取到的报警值异常（等于0或大于400则认为异常）
 517   1              {
 518   2                      gAlarm=25;                                                                                      // 重新赋值报警值为25
 519   2              }
 520   1      }
 521          
 522          char temp_table[20]  ;
 523          code int distance[2][8] = { 
 524          {30,50,100,150,200,250,300,800},                                
 525          {27,45,90,136,181,226,272,726}};
 526          
 527          uint Calibration_Data(uint _val)
 528          {
 529   1              char flag = 0xff;
 530   1              if(_val >= distance[1][0] && _val < distance[1][1]){
 531   2                      flag = 0;
 532   2              }else if(_val >= distance[1][1] && _val < distance[1][2]){
 533   2                      flag = 1;
 534   2              }else if(_val >= distance[1][2] && _val < distance[1][3]){
 535   2                      flag = 2;
 536   2              }else if(_val >= distance[1][3] && _val < distance[1][4]){
 537   2                      flag = 3;
 538   2              }else if(_val >= distance[1][4] && _val < distance[1][5]){
 539   2                      flag = 4;
 540   2              }else if(_val >= distance[1][5] && _val < distance[1][6]){
 541   2                      flag = 5;
 542   2              }else if(_val >= distance[1][6] && _val <= distance[1][7]){
 543   2                      flag = 6;
 544   2              }
 545   1              
 546   1              return  (distance[0][flag + 1] - distance[0][flag]) / \
 547   1                              (distance[1][flag + 1] - distance[1][flag]) * \
 548   1                              (_val - distance[1][flag]) + distance[0][flag];
 549   1              
 550   1              
 551   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 10  

 552          /*********************************************************/
 553          // 主函数
 554          /*********************************************************/
 555          void main()
 556          {
 557   1              uchar i;                                                                        // 循环变量
 558   1              float dist;                                                             // 保存测量结果
 559   1              /*C51采用的是大端存储*/
 560   1              uchar UsartStr[11] = {0x55,0xaa};                               /*定义串口发送字符串*/
 561   1              uchar *pUsartStr = UsartStr;
 562   1              LcdInit();                                                              // 液晶功能初始化
 563   1              LcdShowInit();                                          // 液晶显示内容初始化
 564   1              AlarmInit();                                                    // 报警值初始化
 565   1              
 566   1              TMOD |= 0x01;                                                   // 选择定时器0，并且确定是工作方式1（为了超声波模块测量距离计时用的）
 567   1              UartInit();
 568   1              Trig1_P=0;                                                              // 初始化触发引脚为低电平
 569   1              Trig2_P=0;
 570   1              Trig3_P=0;
 571   1              Trig4_P=0;
 572   1                      sprintf(temp_table, "temp:%04.1f\n",Temp_val);
 573   1                      Send_String(temp_table);
 574   1              while(1)
 575   1              {
 576   2                      //sprintf(temp_table, "temp:%04.1f\n",Temp_val);
 577   2                      // Send_String(temp_table);
 578   2                      // sprintf(temp_table, "voice:%04.3f\n",CLAC_SPEED(Audio_speed));
 579   2                      // Send_String(temp_table);
 580   2                      /*传感器1*/
 581   2                      LcdGotoXY(0,6);                 // 光标定位
 582   2                      dist = Calibration_Data(GetDistance1() * 10);
 583   2                      LcdPrintNum(dist);                      // 显示传感器1测量到的距离
 584   2                      AlarmJudge1(dist);                      // 判断传感器1的测量距离是否需要报警
 585   2                      *(uint *)(pUsartStr + 2) = dist;
 586   2      
 587   2                      /*延时并扫描按键*/
 588   2                      for(i=0;i<15;i++)
 589   2                      {
 590   3                              KeyScanf();
 591   3                              DelayMs(10);
 592   3                      }
 593   2                      
 594   2                      /*传感器2*/
 595   2                      LcdGotoXY(1,13);                // 光标定位
 596   2                      dist = Calibration_Data(GetDistance2() * 10);
 597   2                      LcdPrintNum(dist);                      // 显示传感器2测量到的距离
 598   2                      AlarmJudge2(dist);                      // 判断传感器2的测量距离是否需要报警
 599   2                      *(uint *)(pUsartStr + 2 + 2 * 1) = dist;
 600   2                      /*延时并扫描按键*/
 601   2                      for(i=0;i<15;i++)
 602   2                      {
 603   3                              KeyScanf();
 604   3                              DelayMs(10);
 605   3                      }
 606   2                      
 607   2                      /*传感器3*/
 608   2                      dist = Calibration_Data(GetDistance3() * 10);
 609   2                      LcdGotoXY(1,7);                 // 光标定位
 610   2                      LcdPrintNum(dist);                      // 显示传感器3测量到的距离
 611   2                      AlarmJudge3(dist);                      // 判断传感器3的测量距离是否需要报警
 612   2                      *(uint *)(pUsartStr + 2 + 2 * 2) = dist;
 613   2                      /*延时并扫描按键*/
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 11  

 614   2                      for(i=0;i<15;i++)
 615   2                      {
 616   3                              KeyScanf();
 617   3                              DelayMs(10);
 618   3                      }
 619   2                      
 620   2                      /*传感器4*/
 621   2                      dist = Calibration_Data(GetDistance4() * 10);
 622   2                      LcdGotoXY(1,1);                 // 光标定位
 623   2                      LcdPrintNum(dist);                      // 显示传感器4测量到的距离
 624   2                      AlarmJudge4(dist);                      // 判断传感器4的测量距离是否需要报警
 625   2                      *(uint *)(pUsartStr + 2 + 2 * 3)  = dist;
 626   2                      *(pUsartStr + 2 + 2 * 4)  = Temp_val;
 627   2                      Send_String_Len(pUsartStr, 11);
 628   2                      /*延时并扫描按键*/
 629   2                      for(i=0;i<15;i++)
 630   2                      {
 631   3                              KeyScanf();
 632   3                              DelayMs(10);
 633   3                      }
 634   2              }
 635   1       }
 636          // /*********************************************************/
 637          // // 主函数
 638          // /*********************************************************/
 639          // void main()
 640          // {
 641          //      uchar i;                                                                        // 循环变量
 642          //      float dist;                                                             // 保存测量结果
 643          //      /*C51采用的是大端存储*/
 644          //      //uchar UsartStr[11] = {0x55,0xaa};                             /*定义串口发送字符串*/
 645          //      //uchar *pUsartStr = UsartStr;
 646          //      LcdInit();                                                              // 液晶功能初始化
 647          //      LcdShowInit();                                          // 液晶显示内容初始化
 648          //      AlarmInit();                                                    // 报警值初始化
 649                  
 650          //      TMOD |= 0x01;                                                   // 选择定时器0，并且确定是工作方式1（为了超声波模块测量距离计时用的）
 651          //      UartInit();
 652          //      Trig1_P=0;                                                              // 初始化触发引脚为低电平
 653          //      Trig2_P=0;
 654          //      Trig3_P=0;
 655          //      Trig4_P=0;
 656          
 657          //      while(1)
 658          //      {
 659          //              //sprintf(temp_table, "temp:%04.1f\n",Temp_val);
 660          //              // Send_String(temp_table);
 661          //              // sprintf(temp_table, "voice:%04.3f\n",CLAC_SPEED(Audio_speed));
 662          //              // Send_String(temp_table);
 663          //              /*传感器1*/
 664          //              LcdGotoXY(0,6);                 // 光标定位
 665          //              dist = Calibration_Data(GetDistance1() * 10);
 666          //              LcdPrintNum(dist);                      // 显示传感器1测量到的距离
 667          //              AlarmJudge1(dist);                      // 判断传感器1的测量距离是否需要报警
 668          //              //*(uint *)(pUsartStr + 2) = dist;
 669          
 670          //              /*延时并扫描按键*/
 671          //              for(i=0;i<15;i++)
 672          //              {
 673          //                      KeyScanf();
 674          //                      DelayMs(10);
 675          //              }
C51 COMPILER V9.60.0.0   MAIN                                                              05/21/2020 20:16:01 PAGE 12  

 676                          
 677          //              /*传感器2*/
 678          //              LcdGotoXY(1,13);                // 光标定位
 679          //              dist = Calibration_Data(GetDistance2() * 10);
 680          //              LcdPrintNum(dist);                      // 显示传感器2测量到的距离
 681          //              AlarmJudge2(dist);                      // 判断传感器2的测量距离是否需要报警
 682          //              //*(uint *)(pUsartStr + 2 + 2 * 1) = dist;
 683          //              /*延时并扫描按键*/
 684          //              for(i=0;i<15;i++)
 685          //              {
 686          //                      KeyScanf();
 687          //                      DelayMs(10);
 688          //              }
 689                          
 690          //              /*传感器3*/
 691          //              dist = Calibration_Data(GetDistance3() * 10);
 692          //              LcdGotoXY(1,7);                 // 光标定位
 693          //              LcdPrintNum(dist);                      // 显示传感器3测量到的距离
 694          //              AlarmJudge3(dist);                      // 判断传感器3的测量距离是否需要报警
 695          //              //*(uint *)(pUsartStr + 2 + 2 * 2) = dist;
 696          //              /*延时并扫描按键*/
 697          //              for(i=0;i<15;i++)
 698          //              {
 699          //                      KeyScanf();
 700          //                      DelayMs(10);
 701          //              }
 702                          
 703          //              /*传感器4*/
 704          //              dist = Calibration_Data(GetDistance4() * 10);
 705          //              LcdGotoXY(1,1);                 // 光标定位
 706          //              LcdPrintNum(dist);                      // 显示传感器4测量到的距离
 707          //              AlarmJudge4(dist);                      // 判断传感器4的测量距离是否需要报警
 708          //              //*(uint *)(pUsartStr + 2 + 2 * 3)  = dist;
 709          //              //*(pUsartStr + 2 + 2 * 4)  = Temp_val;
 710          //              //Send_String_Len(pUsartStr, 11);
 711          //              /*延时并扫描按键*/
 712          //              for(i=0;i<15;i++)
 713          //              {
 714          //                      KeyScanf();
 715          //                      DelayMs(10);
 716          //              }
 717          //      }
 718          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2237    ----
   CONSTANT SIZE    =    124    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30      50
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
