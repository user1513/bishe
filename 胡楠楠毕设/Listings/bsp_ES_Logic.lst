C51 COMPILER V9.60.0.0   BSP_ES_LOGIC                                                      03/23/2020 11:33:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BSP_ES_LOGIC
OBJECT MODULE PLACED IN ..\Objects\bsp_ES_Logic.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE ..\BSP\src\bsp_ES_Logic.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\user;..\BSP
                    -\inc) DEBUG OBJECTEXTEND PRINT(..\Listings\bsp_ES_Logic.lst) OBJECT(..\Objects\bsp_ES_Logic.obj)

line level    source

   1          #include "bsp_405x.h"
   2          //test
   3          
   4          const float Electronic_dw[3] = {1, 4.48, 45};//设置每个挡位的放大倍数,从左到右1->3挡位
   5          
   6          struct _Es_Range
   7          {
   8                  /* data */
   9                  float Range_min;                //挡位最小值
  10                  float Range_max;                //挡位最大值
  11          };
  12          
  13          xdata struct _Es_Range Es_Range[3] ={ 
  14          {1, 5},                           //设置第一个挡位的范围
  15          {0.1, 1},                         //设置第二个挡位的范围
  16          {0, 0.1}};                         //设置第三个挡位的范围
  17          
  18          static uint8_t  Electronic_Auto_Mode(float val,uint8_t dw);//自动获取合适挡位
  19          
  20          static double ES_Val[2] = 0 ;//获取的电压值
  21          static double ES_Table_Val[4] = 0 ;//获取的电压值
  22           
  23          double* Get_ES_Table_Val(void)  //外部调用获取电压值
  24          {
  25   1              return(ES_Table_Val);
  26   1      }
  27          
  28          
  29          static double Get_ES_Val(void)  //内部调用获取电压值
  30          {
  31   1              return(*ES_Val);
  32   1      }
  33          
  34          static double Get_ES_Val2(void) //内部调用获取电压值
  35          {
  36   1              return(*(ES_Val + 1));
  37   1      }
  38          
  39          static void Set_ES_Val1(double temp)    //内部调用设置校零电压值
  40          {
  41   1              *ES_Val = temp;
  42   1      }
  43          
  44          static void Set_ES_Val2(double temp)    //内部调用设置未校零电压值
  45          {
  46   1              *(ES_Val + 1) = temp;
  47   1      }
  48          
  49          uint8_t Electronic_scale_scan(uint8_t _scan,float val)
  50          {
  51   1              uint8_t uReturn = 0;
  52   1              static uint8_t State_Machine = 1;       //状态机
  53   1              static uint8_t last_scan = 0;           //记录上一次输入挡位
  54   1              static uint8_t last_dw = 1;                     //记录上一次放大挡位(初始化默认为1)
C51 COMPILER V9.60.0.0   BSP_ES_LOGIC                                                      03/23/2020 11:33:03 PAGE 2   

  55   1              uint8_t temp = 0;
  56   1              if(_scan != last_scan){                         //当输入的电子秤编号与上一次不同时进行状态机置1
  57   2                      last_scan = _scan;
  58   2                      //设置从第一步开始
  59   2                      State_Machine = 1;
  60   2                      last_dw = 1;
  61   2              }
  62   1      
  63   1      
  64   1      
  65   1              switch(State_Machine)
  66   1              {
  67   2                      case 1:
  68   2                              switch(last_scan)                                                       //打开对应输入开关
  69   2                              {
  70   3                                      case 0:INPUT_ONE_ENALBE                 break;
  71   3                                      case 1:INPUT_TWO_ENALBE                 break;
  72   3                                      case 2:INPUT_THREE_ENALBE               break;
  73   3                                      case 3:INPUT_FOUR_ENALBE                break;
  74   3                                      case 4:INPUT_CLEAR_ENALBE               break;
  75   3                                      default :INPUT_CLEAR_ENALBE     break;
  76   3                              }
  77   2                              OP_dw1_ENALBE;
  78   2                              State_Machine++;
  79   2                      break;
  80   2                      case 2:                                                                                 //进行数据的获取
  81   2                              temp = Electronic_Auto_Mode(val, last_dw);
  82   2                              
  83   2                              if(last_dw != temp){
  84   3                                      last_dw = temp;
  85   3                                      switch(last_dw)
  86   3                                      {
  87   4                                              case 1:OP_dw1_ENALBE            break;
  88   4                                              case 2:OP_dw2_ENALBE            break;
  89   4                                              case 3:OP_dw3_ENALBE            break;
  90   4                                              default:break;
  91   4                                      }
  92   3                                      State_Machine = 5;
  93   3                              }
  94   2                              else{
  95   3                                      Set_ES_Val2(val / Electronic_dw[last_dw-1]);
  96   3                                      State_Machine++;
  97   3                                      INPUT_CLEAR_ENALBE
  98   3                              }
  99   2                              break;
 100   2                      case 3:State_Machine++; break;
 101   2                      case 4:                                         //获取校零数据
 102   2                              switch (last_dw)
 103   2                              {
 104   3                                      case 1:
 105   3                                      if((Get_ES_Val2() - (val / Electronic_dw[last_dw - 1])) >= 4.971917)
 106   3                                              Set_ES_Val1(((4.95-5)/(4.971917 - 4.978022)*(Get_ES_Val2() - (val / Electronic_dw[last_dw - 1]) - 4.9
             -71917))+4.95) ;
 107   3                                      else                    
 108   3                                              Set_ES_Val1(0.991612*(Get_ES_Val2() - (val / Electronic_dw[last_dw - 1]))+0.0193707) ;
 109   3                                      break;
 110   3                                      case 2:Set_ES_Val1(1.02098*(Get_ES_Val2() - (val / Electronic_dw[last_dw - 1]))+0.00819215) ;break;
 111   3                                      case 3:Set_ES_Val1(1.02078*(Get_ES_Val2() - (val / Electronic_dw[last_dw - 1]))+0.000493174) ;
 112   3                                                if(Get_ES_Val() <= 0.001) Set_ES_Val1(0);break;
 113   3                                      default:break;
 114   3                              }
 115   2                              ES_Table_Val[_scan] = Get_ES_Val();
C51 COMPILER V9.60.0.0   BSP_ES_LOGIC                                                      03/23/2020 11:33:03 PAGE 3   

 116   2                              uReturn = 1;
 117   2      //                      switch(last_scan)                                                       //打开对应输入开关
 118   2      //                      {
 119   2      //                              case 0:INPUT_ONE_ENALBE                 break;
 120   2      //                              case 1:INPUT_TWO_ENALBE                 break;
 121   2      //                              case 2:INPUT_THREE_ENALBE               break;
 122   2      //                              case 3:INPUT_FOUR_ENALBE                break;
 123   2      //                              case 4:INPUT_CLEAR_ENALBE               break;
 124   2      //                              default :INPUT_CLEAR_ENALBE     break;
 125   2      //                      }
 126   2      //                      State_Machine = 5;//重新获取数据
 127   2                              break;
 128   2                      case 5:State_Machine = 2; break;        
 129   2                      default: break;
 130   2              }
 131   1              return uReturn;
 132   1      }
 133          
 134          
 135          
 136          static uint8_t  Electronic_Auto_Mode(float val,uint8_t dw)
 137          {
 138   1              uint8_t state = 0;
 139   1              float temp = val / Electronic_dw[dw - 1];//数组存储从0开始
 140   1                      if(temp > Es_Range[0].Range_min)
 141   1                              state = 1;
 142   1                      else if(temp <= Es_Range[1].Range_max && temp > Es_Range[1].Range_min)
 143   1                              state = 2;
 144   1                      else if(temp >= Es_Range[2].Range_min)
 145   1                              state = 3;
 146   1              return state;
 147   1      }
 148          
 149          
 150          
 151          
 152          
 153          // static uint8_t  Electronic_Auto_Mode(float val,uint8_t dw)
 154          // {
 155          //      uint8_t state = 0;
 156          //      float temp = val / Electronic_dw[dw];
 157          //      switch(dw)
 158          //      {
 159          //              case 1: if(temp > Es_Range[0].Rangle_min)
 160          //                                      state = 1;
 161          //                              else if(temp <= Es_Range[1].Rangle_max && temp > Es_Range[1].Rangle_min)
 162          //                                      state = 2;
 163          //                              else if(temp > 0)
 164          //                                      state = 3;
 165          //              break;
 166          //              case 2:
 167          //                              if(temp <= Es_Range[1].Rangle_max && temp > Es_Range[1].Rangle_min)
 168          //                                      state = 2;
 169          //                              else if(temp > 0)
 170          //                                      state = 3;
 171          //              break;
 172          //              case 3:
 173          //                              if(temp <= Es_Range[2].Rangle_max && temp > Es_Range[2].Rangle_min)
 174          //                                      state = 3;
 175          //      }
 176          //      return state;
 177          // }
C51 COMPILER V9.60.0.0   BSP_ES_LOGIC                                                      03/23/2020 11:33:03 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    868    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     39      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
